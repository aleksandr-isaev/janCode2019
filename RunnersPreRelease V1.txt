Module Module1

    Sub Main()
        Dim NewSystem As New TrackerSystem
        Do

        Loop While NewSystem.Menu()


    End Sub

End Module

Class TrackerSystem
    Private Accounts(9) As RunTracker
    Private AccountCount As Integer = 0

    Public Sub New()

        Accounts(0) = New RunTracker("Simon", "5000", "fish", True)
        Accounts(1) = New RunTracker("Annie", "2500", "fish", True)
        AccountCount = 2

    End Sub

    Public Function Menu() As Boolean
        Dim choice As Integer
        MenuOptions()
        choice = Console.ReadLine()
        Select Case choice
            Case 0
                Return False
            Case 1
                AddNewRunner()
            Case 2
                AddNewRun()
            Case 3
                OutputHistory()
            Case 4
                TenKmGoal()
            Case Else
                Console.WriteLine("Not an Option")
        End Select
        Return True
    End Function

    Public Sub MenuOptions()
        Console.WriteLine("")
        Console.WriteLine("---------------------------------------")
        Console.WriteLine("Choose 1 add a new runner")
        Console.WriteLine("Choose 2 add a new run")
        Console.WriteLine("Choose 3 for your run history")
        Console.WriteLine("Choose 4 for your 10 km goal analysis")
        Console.WriteLine("Choose 0 to exit")
    End Sub

    Public Sub AddNewRunner()
        Dim newName As String
        Dim newGoal As Integer
        Dim newPw As String
        Do
            Console.WriteLine("Enter Your Name")
            newName = Console.ReadLine()
            Console.WriteLine("Enter Your 10 Km goal time")
            newGoal = Console.ReadLine
            Console.WriteLine("Enter Your Password")
            newPw = Console.ReadLine
            Accounts(AccountCount) = New RunTracker(newName, newGoal, newPw, False)
        Loop Until Accounts(AccountCount).GetName <> ""

        AccountCount += 1
    End Sub

    Public Sub AddNewRun()
        Dim foundLocation As Integer
        foundLocation = Verify()
        If foundLocation > -1 Then
            Accounts(foundLocation).AddRun()
        End If

    End Sub

    Public Sub OutputHistory()
        Dim foundLocation As Integer
        foundLocation = Verify()
        If foundLocation > -1 Then
            Accounts(foundLocation).RunReview()
        End If

    End Sub

    Public Sub TenKmGoal()
        Dim foundLocation As Integer
        foundLocation = Verify()
        If foundLocation > -1 Then
            Accounts(foundLocation).RunAnalysis()
        End If

    End Sub

    Public Function Verify() As Integer
        Dim inputName As String
        Dim inputPw As String

        Console.WriteLine("Enter Your Name")
        inputName = Console.ReadLine()
        Console.WriteLine("Enter Your Password")
        inputPw = Console.ReadLine()

        For x = 0 To AccountCount - 1
            If inputName = Accounts(x).GetName Then
                If inputPw = Accounts(x).GetPw Then
                    Return x
                End If
            End If
        Next
        Console.WriteLine("Incorrect Username or password")
        Return -1
    End Function

End Class


Class RunTracker
    Private runnerName As String
    Private goalTenK As Integer '3000s = 50mins
    Private runs(4) As Run
    Private pw As String
    Private runCount As Integer = 0

    Public Sub New(ByVal newName As String, ByVal newGoal As Integer, ByVal newPw As String, ByVal test As Boolean)

        runnerName = newName
        goalTenK = newGoal
        pw = newPw

        If test = True Then
            TestDataPopulation()
        End If

    End Sub

    Private Function SetName(ByVal inputName As String) As Boolean
        runnerName = inputName
        If runnerName <> "" Then
            Return True
        End If
        Return False
    End Function

    Private Function SetGoalTenK(ByVal inputGoal As Integer) As Boolean
        goalTenK = inputGoal
        Return True
    End Function

    Private Function SetPw(ByVal inputPw As String) As Boolean
        pw = inputPw
        Return True
    End Function

    Public Sub RunReview()
        If runCount > 0 Then
            For x = 0 To runCount - 1
                runs(x).OutputRun()
            Next
        End If

    End Sub

    Public Function GetName() As String
        Return runnerName
    End Function

    Public Function GetPw() As String
        Return pw
    End Function

    Public Sub AddRun()
        Dim value As Integer
        runs(runCount) = New Run()
        Console.WriteLine("Enter the DISTANCE you ran, in meters")
        value = Console.ReadLine()
        runs(runCount).SetDistance(value)
        Console.WriteLine("Enter the TIME you ran, in seconds")
        value = Console.ReadLine()
        runs(runCount).SetSeconds(value)
        runs(runCount).GetPace()
        runs(runCount).GetSpeed()
        runCount += 1
    End Sub

    Public Sub RunAnalysis()
        Dim goalSpeed As Double = Converter.mps2kmph(10000 / goalTenK)
        Dim latestSpeed As Double = runs(runCount - 1).GetSpeed

        If goalSpeed > latestSpeed Then
            Console.WriteLine("You have not met your goal speed")
        Else
            Console.WriteLine("You have met your goal speed")
        End If
    End Sub

    Private Sub TestDataPopulation()
        runs(0) = New Run
        runs(0).SetDistance(1000)
        runs(0).SetSeconds(240)
        runs(1) = New Run
        runs(1).SetDistance(2000)
        runs(1).SetSeconds(720)
        runs(2) = New Run
        runs(2).SetDistance(3000)
        runs(2).SetSeconds(1200)
        runCount = 3
    End Sub

End Class


Class Converter
    Public Shared Function mps2kmph(ByVal inputSpeed) As Double
        Return inputSpeed * 3.6 'converts meters/sec value to km/h
    End Function
End Class




Class Run
    Private distance
    Private seconds

    Public Sub SetDistance(ByVal newValue As Integer)
        distance = newValue
    End Sub

    Public Sub SetSeconds(ByVal newValue As Integer)
        seconds = newValue
    End Sub

    Public Function GetDistance() As Integer
        Return distance
    End Function
    Public Function GetSeconds() As Integer
        Return seconds
    End Function
    Public Function GetPace() As Integer 'wrong data type
        Return (seconds / 60) / (distance / 1000)
    End Function
    Public Function GetSpeed() As Decimal
        Return Converter.mps2kmph(distance / seconds)
    End Function
    Public Sub OutputRun()
        Console.WriteLine("You ran " & distance / 1000 & " km in " & seconds / 60 & " Minutes")
        Console.WriteLine("     You average speed was " & GetSpeed())
        Console.WriteLine("     You average pace was " & GetPace())
    End Sub

End Class
